#pragma once
#include "Parser/LexerTests.h"

TestState RunLexerTests() 
 {
	auto className = "LexerTests";
	auto testClass = std::make_shared<Soup::Syntax::InnerTree::UnitTests::LexerTests>();
	TestState state = { 0, 0 };
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"alignas\", CppLexer::AlignAs)", [&testClass]() { testClass->SingleToken_Keyword("alignas", CppLexer::AlignAs); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"asm\", CppLexer::Asm)", [&testClass]() { testClass->SingleToken_Keyword("asm", CppLexer::Asm); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"auto\", CppLexer::Auto)", [&testClass]() { testClass->SingleToken_Keyword("auto", CppLexer::Auto); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"bool\", CppLexer::Bool)", [&testClass]() { testClass->SingleToken_Keyword("bool", CppLexer::Bool); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"break\", CppLexer::Break)", [&testClass]() { testClass->SingleToken_Keyword("break", CppLexer::Break); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"case\", CppLexer::Case)", [&testClass]() { testClass->SingleToken_Keyword("case", CppLexer::Case); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"catch\", CppLexer::Catch)", [&testClass]() { testClass->SingleToken_Keyword("catch", CppLexer::Catch); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"char\", CppLexer::Char)", [&testClass]() { testClass->SingleToken_Keyword("char", CppLexer::Char); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"char16_t\", CppLexer::Char16)", [&testClass]() { testClass->SingleToken_Keyword("char16_t", CppLexer::Char16); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"char32_t\", CppLexer::Char32)", [&testClass]() { testClass->SingleToken_Keyword("char32_t", CppLexer::Char32); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"class\", CppLexer::Class)", [&testClass]() { testClass->SingleToken_Keyword("class", CppLexer::Class); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"const\", CppLexer::Const)", [&testClass]() { testClass->SingleToken_Keyword("const", CppLexer::Const); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"constexpr\", CppLexer::ConstExpr)", [&testClass]() { testClass->SingleToken_Keyword("constexpr", CppLexer::ConstExpr); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"const_cast\", CppLexer::ConstCast)", [&testClass]() { testClass->SingleToken_Keyword("const_cast", CppLexer::ConstCast); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"continue\", CppLexer::Continue)", [&testClass]() { testClass->SingleToken_Keyword("continue", CppLexer::Continue); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"decltype\", CppLexer::DeclType)", [&testClass]() { testClass->SingleToken_Keyword("decltype", CppLexer::DeclType); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"default\", CppLexer::Default)", [&testClass]() { testClass->SingleToken_Keyword("default", CppLexer::Default); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"delete\", CppLexer::Delete)", [&testClass]() { testClass->SingleToken_Keyword("delete", CppLexer::Delete); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"do\", CppLexer::Do)", [&testClass]() { testClass->SingleToken_Keyword("do", CppLexer::Do); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"double\", CppLexer::Double)", [&testClass]() { testClass->SingleToken_Keyword("double", CppLexer::Double); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"dynamic_cast\", CppLexer::DynamicCast)", [&testClass]() { testClass->SingleToken_Keyword("dynamic_cast", CppLexer::DynamicCast); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"else\", CppLexer::Else)", [&testClass]() { testClass->SingleToken_Keyword("else", CppLexer::Else); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"enum\", CppLexer::Enum)", [&testClass]() { testClass->SingleToken_Keyword("enum", CppLexer::Enum); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"explicit\", CppLexer::Explicit)", [&testClass]() { testClass->SingleToken_Keyword("explicit", CppLexer::Explicit); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"export\", CppLexer::Export)", [&testClass]() { testClass->SingleToken_Keyword("export", CppLexer::Export); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"extern\", CppLexer::Extern)", [&testClass]() { testClass->SingleToken_Keyword("extern", CppLexer::Extern); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"false\", CppLexer::False)", [&testClass]() { testClass->SingleToken_Keyword("false", CppLexer::False); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"float\", CppLexer::Float)", [&testClass]() { testClass->SingleToken_Keyword("float", CppLexer::Float); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"for\", CppLexer::For)", [&testClass]() { testClass->SingleToken_Keyword("for", CppLexer::For); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"friend\", CppLexer::Friend)", [&testClass]() { testClass->SingleToken_Keyword("friend", CppLexer::Friend); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"goto\", CppLexer::GoTo)", [&testClass]() { testClass->SingleToken_Keyword("goto", CppLexer::GoTo); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"if\", CppLexer::If)", [&testClass]() { testClass->SingleToken_Keyword("if", CppLexer::If); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"inline\", CppLexer::Inline)", [&testClass]() { testClass->SingleToken_Keyword("inline", CppLexer::Inline); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"int\", CppLexer::Int)", [&testClass]() { testClass->SingleToken_Keyword("int", CppLexer::Int); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"long\", CppLexer::Long)", [&testClass]() { testClass->SingleToken_Keyword("long", CppLexer::Long); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"mutable\", CppLexer::Mutable)", [&testClass]() { testClass->SingleToken_Keyword("mutable", CppLexer::Mutable); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"namespace\", CppLexer::Namespace)", [&testClass]() { testClass->SingleToken_Keyword("namespace", CppLexer::Namespace); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"new\", CppLexer::New)", [&testClass]() { testClass->SingleToken_Keyword("new", CppLexer::New); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"noexcept\", CppLexer::NoExcept)", [&testClass]() { testClass->SingleToken_Keyword("noexcept", CppLexer::NoExcept); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"nullptr\", CppLexer::Nullptr)", [&testClass]() { testClass->SingleToken_Keyword("nullptr", CppLexer::Nullptr); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"operator\", CppLexer::Operator)", [&testClass]() { testClass->SingleToken_Keyword("operator", CppLexer::Operator); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"private\", CppLexer::Private)", [&testClass]() { testClass->SingleToken_Keyword("private", CppLexer::Private); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"protected\", CppLexer::Protected)", [&testClass]() { testClass->SingleToken_Keyword("protected", CppLexer::Protected); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"public\", CppLexer::Public)", [&testClass]() { testClass->SingleToken_Keyword("public", CppLexer::Public); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"register\", CppLexer::Register)", [&testClass]() { testClass->SingleToken_Keyword("register", CppLexer::Register); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"reinterpret_cast\", CppLexer::ReinterpretCast)", [&testClass]() { testClass->SingleToken_Keyword("reinterpret_cast", CppLexer::ReinterpretCast); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"return\", CppLexer::Return)", [&testClass]() { testClass->SingleToken_Keyword("return", CppLexer::Return); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"short\", CppLexer::Short)", [&testClass]() { testClass->SingleToken_Keyword("short", CppLexer::Short); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"signed\", CppLexer::Signed)", [&testClass]() { testClass->SingleToken_Keyword("signed", CppLexer::Signed); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"sizeof\", CppLexer::SizeOf)", [&testClass]() { testClass->SingleToken_Keyword("sizeof", CppLexer::SizeOf); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"static\", CppLexer::Static)", [&testClass]() { testClass->SingleToken_Keyword("static", CppLexer::Static); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"static_assert\", CppLexer::StaticAssert)", [&testClass]() { testClass->SingleToken_Keyword("static_assert", CppLexer::StaticAssert); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"static_cast\", CppLexer::StaticCast)", [&testClass]() { testClass->SingleToken_Keyword("static_cast", CppLexer::StaticCast); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"struct\", CppLexer::Struct)", [&testClass]() { testClass->SingleToken_Keyword("struct", CppLexer::Struct); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"switch\", CppLexer::Switch)", [&testClass]() { testClass->SingleToken_Keyword("switch", CppLexer::Switch); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"template\", CppLexer::Template)", [&testClass]() { testClass->SingleToken_Keyword("template", CppLexer::Template); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"this\", CppLexer::This)", [&testClass]() { testClass->SingleToken_Keyword("this", CppLexer::This); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"thread_local\", CppLexer::ThreadLocal)", [&testClass]() { testClass->SingleToken_Keyword("thread_local", CppLexer::ThreadLocal); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"throw\", CppLexer::Throw)", [&testClass]() { testClass->SingleToken_Keyword("throw", CppLexer::Throw); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"true\", CppLexer::True)", [&testClass]() { testClass->SingleToken_Keyword("true", CppLexer::True); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"try\", CppLexer::Try)", [&testClass]() { testClass->SingleToken_Keyword("try", CppLexer::Try); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"typedef\", CppLexer::TypeDef)", [&testClass]() { testClass->SingleToken_Keyword("typedef", CppLexer::TypeDef); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"typeid\", CppLexer::TypeId)", [&testClass]() { testClass->SingleToken_Keyword("typeid", CppLexer::TypeId); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"typename\", CppLexer::TypeName)", [&testClass]() { testClass->SingleToken_Keyword("typename", CppLexer::TypeName); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"union\", CppLexer::Union)", [&testClass]() { testClass->SingleToken_Keyword("union", CppLexer::Union); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"unsigned\", CppLexer::Unsigned)", [&testClass]() { testClass->SingleToken_Keyword("unsigned", CppLexer::Unsigned); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"using\", CppLexer::Using)", [&testClass]() { testClass->SingleToken_Keyword("using", CppLexer::Using); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"virtual\", CppLexer::Virtual)", [&testClass]() { testClass->SingleToken_Keyword("virtual", CppLexer::Virtual); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"void\", CppLexer::Void)", [&testClass]() { testClass->SingleToken_Keyword("void", CppLexer::Void); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"volatile\", CppLexer::Volatile)", [&testClass]() { testClass->SingleToken_Keyword("volatile", CppLexer::Volatile); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"wchar_t\", CppLexer::WChar)", [&testClass]() { testClass->SingleToken_Keyword("wchar_t", CppLexer::WChar); });
	state += Soup::Test::RunTest(className, "SingleToken_Keyword(\"while\", CppLexer::While)", [&testClass]() { testClass->SingleToken_Keyword("while", CppLexer::While); });
	state += Soup::Test::RunTest(className, "SingleToken_OperatorsAndPunctuation(\"{\", CppLexer::OpenBrace)", [&testClass]() { testClass->SingleToken_OperatorsAndPunctuation("{", CppLexer::OpenBrace); });
	state += Soup::Test::RunTest(className, "SingleToken_OperatorsAndPunctuation(\"}\", CppLexer::CloseBrace)", [&testClass]() { testClass->SingleToken_OperatorsAndPunctuation("}", CppLexer::CloseBrace); });
	state += Soup::Test::RunTest(className, "SingleToken_OperatorsAndPunctuation(\"[\", CppLexer::OpenBracket)", [&testClass]() { testClass->SingleToken_OperatorsAndPunctuation("[", CppLexer::OpenBracket); });
	state += Soup::Test::RunTest(className, "SingleToken_OperatorsAndPunctuation(\"]\", CppLexer::CloseBracket)", [&testClass]() { testClass->SingleToken_OperatorsAndPunctuation("]", CppLexer::CloseBracket); });
	state += Soup::Test::RunTest(className, "SingleToken_OperatorsAndPunctuation(\"(\", CppLexer::OpenParenthesis)", [&testClass]() { testClass->SingleToken_OperatorsAndPunctuation("(", CppLexer::OpenParenthesis); });
	state += Soup::Test::RunTest(className, "SingleToken_OperatorsAndPunctuation(\")\", CppLexer::CloseParenthesis)", [&testClass]() { testClass->SingleToken_OperatorsAndPunctuation(")", CppLexer::CloseParenthesis); });
	state += Soup::Test::RunTest(className, "SingleToken_OperatorsAndPunctuation(\";\", CppLexer::Semicolon)", [&testClass]() { testClass->SingleToken_OperatorsAndPunctuation(";", CppLexer::Semicolon); });
	state += Soup::Test::RunTest(className, "SingleToken_OperatorsAndPunctuation(\":\", CppLexer::Colon)", [&testClass]() { testClass->SingleToken_OperatorsAndPunctuation(":", CppLexer::Colon); });
	state += Soup::Test::RunTest(className, "SingleToken_OperatorsAndPunctuation(\"...\", CppLexer::Ellipsis)", [&testClass]() { testClass->SingleToken_OperatorsAndPunctuation("...", CppLexer::Ellipsis); });
	state += Soup::Test::RunTest(className, "SingleToken_OperatorsAndPunctuation(\"new\", CppLexer::New)", [&testClass]() { testClass->SingleToken_OperatorsAndPunctuation("new", CppLexer::New); });
	state += Soup::Test::RunTest(className, "SingleToken_OperatorsAndPunctuation(\"delete\", CppLexer::Delete)", [&testClass]() { testClass->SingleToken_OperatorsAndPunctuation("delete", CppLexer::Delete); });
	state += Soup::Test::RunTest(className, "SingleToken_OperatorsAndPunctuation(\"?\", CppLexer::QuestionMark)", [&testClass]() { testClass->SingleToken_OperatorsAndPunctuation("?", CppLexer::QuestionMark); });
	state += Soup::Test::RunTest(className, "SingleToken_OperatorsAndPunctuation(\"::\", CppLexer::DoubleColon)", [&testClass]() { testClass->SingleToken_OperatorsAndPunctuation("::", CppLexer::DoubleColon); });
	state += Soup::Test::RunTest(className, "SingleToken_OperatorsAndPunctuation(\".\", CppLexer::Period)", [&testClass]() { testClass->SingleToken_OperatorsAndPunctuation(".", CppLexer::Period); });
	state += Soup::Test::RunTest(className, "SingleToken_OperatorsAndPunctuation(\".*\", CppLexer::PeriodAsterisk)", [&testClass]() { testClass->SingleToken_OperatorsAndPunctuation(".*", CppLexer::PeriodAsterisk); });
	state += Soup::Test::RunTest(className, "SingleToken_OperatorsAndPunctuation(\"+\", CppLexer::Plus)", [&testClass]() { testClass->SingleToken_OperatorsAndPunctuation("+", CppLexer::Plus); });
	state += Soup::Test::RunTest(className, "SingleToken_OperatorsAndPunctuation(\"-\", CppLexer::Minus)", [&testClass]() { testClass->SingleToken_OperatorsAndPunctuation("-", CppLexer::Minus); });
	state += Soup::Test::RunTest(className, "SingleToken_OperatorsAndPunctuation(\"*\", CppLexer::Asterisk)", [&testClass]() { testClass->SingleToken_OperatorsAndPunctuation("*", CppLexer::Asterisk); });
	state += Soup::Test::RunTest(className, "SingleToken_OperatorsAndPunctuation(\"/\", CppLexer::ForwardSlash)", [&testClass]() { testClass->SingleToken_OperatorsAndPunctuation("/", CppLexer::ForwardSlash); });
	state += Soup::Test::RunTest(className, "SingleToken_OperatorsAndPunctuation(\"%\", CppLexer::Percent)", [&testClass]() { testClass->SingleToken_OperatorsAndPunctuation("%", CppLexer::Percent); });
	state += Soup::Test::RunTest(className, "SingleToken_OperatorsAndPunctuation(\"^\", CppLexer::Caret)", [&testClass]() { testClass->SingleToken_OperatorsAndPunctuation("^", CppLexer::Caret); });
	state += Soup::Test::RunTest(className, "SingleToken_OperatorsAndPunctuation(\"&\", CppLexer::Ampersand)", [&testClass]() { testClass->SingleToken_OperatorsAndPunctuation("&", CppLexer::Ampersand); });
	state += Soup::Test::RunTest(className, "SingleToken_OperatorsAndPunctuation(\"|\", CppLexer::VerticalBar)", [&testClass]() { testClass->SingleToken_OperatorsAndPunctuation("|", CppLexer::VerticalBar); });
	state += Soup::Test::RunTest(className, "SingleToken_OperatorsAndPunctuation(\"~\", CppLexer::Tilde)", [&testClass]() { testClass->SingleToken_OperatorsAndPunctuation("~", CppLexer::Tilde); });
	state += Soup::Test::RunTest(className, "SingleToken_OperatorsAndPunctuation(\"!\", CppLexer::ExclamationMark)", [&testClass]() { testClass->SingleToken_OperatorsAndPunctuation("!", CppLexer::ExclamationMark); });
	state += Soup::Test::RunTest(className, "SingleToken_OperatorsAndPunctuation(\"=\", CppLexer::Equal)", [&testClass]() { testClass->SingleToken_OperatorsAndPunctuation("=", CppLexer::Equal); });
	state += Soup::Test::RunTest(className, "SingleToken_OperatorsAndPunctuation(\"<\", CppLexer::LessThan)", [&testClass]() { testClass->SingleToken_OperatorsAndPunctuation("<", CppLexer::LessThan); });
	state += Soup::Test::RunTest(className, "SingleToken_OperatorsAndPunctuation(\">\", CppLexer::GreaterThan)", [&testClass]() { testClass->SingleToken_OperatorsAndPunctuation(">", CppLexer::GreaterThan); });
	state += Soup::Test::RunTest(className, "SingleToken_OperatorsAndPunctuation(\"+=\", CppLexer::PlusEqual)", [&testClass]() { testClass->SingleToken_OperatorsAndPunctuation("+=", CppLexer::PlusEqual); });
	state += Soup::Test::RunTest(className, "SingleToken_OperatorsAndPunctuation(\"-=\", CppLexer::MinusEqual)", [&testClass]() { testClass->SingleToken_OperatorsAndPunctuation("-=", CppLexer::MinusEqual); });
	state += Soup::Test::RunTest(className, "SingleToken_OperatorsAndPunctuation(\"*=\", CppLexer::AsteriskEqual)", [&testClass]() { testClass->SingleToken_OperatorsAndPunctuation("*=", CppLexer::AsteriskEqual); });
	state += Soup::Test::RunTest(className, "SingleToken_OperatorsAndPunctuation(\"/=\", CppLexer::ForwardSlashEqual)", [&testClass]() { testClass->SingleToken_OperatorsAndPunctuation("/=", CppLexer::ForwardSlashEqual); });
	state += Soup::Test::RunTest(className, "SingleToken_OperatorsAndPunctuation(\"%=\", CppLexer::PercentEqual)", [&testClass]() { testClass->SingleToken_OperatorsAndPunctuation("%=", CppLexer::PercentEqual); });
	state += Soup::Test::RunTest(className, "SingleToken_OperatorsAndPunctuation(\"^=\", CppLexer::CaretEqual)", [&testClass]() { testClass->SingleToken_OperatorsAndPunctuation("^=", CppLexer::CaretEqual); });
	state += Soup::Test::RunTest(className, "SingleToken_OperatorsAndPunctuation(\"&=\", CppLexer::AmpersandEqual)", [&testClass]() { testClass->SingleToken_OperatorsAndPunctuation("&=", CppLexer::AmpersandEqual); });
	state += Soup::Test::RunTest(className, "SingleToken_OperatorsAndPunctuation(\"|=\", CppLexer::VerticalBarEqual)", [&testClass]() { testClass->SingleToken_OperatorsAndPunctuation("|=", CppLexer::VerticalBarEqual); });
	state += Soup::Test::RunTest(className, "SingleToken_OperatorsAndPunctuation(\"<<\", CppLexer::DoubleLessThan)", [&testClass]() { testClass->SingleToken_OperatorsAndPunctuation("<<", CppLexer::DoubleLessThan); });
	state += Soup::Test::RunTest(className, "SingleToken_OperatorsAndPunctuation(\"<<=\", CppLexer::DoubleLessThanEqual)", [&testClass]() { testClass->SingleToken_OperatorsAndPunctuation("<<=", CppLexer::DoubleLessThanEqual); });
	state += Soup::Test::RunTest(className, "SingleToken_OperatorsAndPunctuation(\">>=\", CppLexer::DoubleGreaterThanEqual)", [&testClass]() { testClass->SingleToken_OperatorsAndPunctuation(">>=", CppLexer::DoubleGreaterThanEqual); });
	state += Soup::Test::RunTest(className, "SingleToken_OperatorsAndPunctuation(\"==\", CppLexer::DoubleEqual)", [&testClass]() { testClass->SingleToken_OperatorsAndPunctuation("==", CppLexer::DoubleEqual); });
	state += Soup::Test::RunTest(className, "SingleToken_OperatorsAndPunctuation(\"!=\", CppLexer::ExclamationMarkEqual)", [&testClass]() { testClass->SingleToken_OperatorsAndPunctuation("!=", CppLexer::ExclamationMarkEqual); });
	state += Soup::Test::RunTest(className, "SingleToken_OperatorsAndPunctuation(\"<=\", CppLexer::LessThanEqual)", [&testClass]() { testClass->SingleToken_OperatorsAndPunctuation("<=", CppLexer::LessThanEqual); });
	state += Soup::Test::RunTest(className, "SingleToken_OperatorsAndPunctuation(\">=\", CppLexer::GreaterThanEqual)", [&testClass]() { testClass->SingleToken_OperatorsAndPunctuation(">=", CppLexer::GreaterThanEqual); });
	state += Soup::Test::RunTest(className, "SingleToken_OperatorsAndPunctuation(\"&&\", CppLexer::DoubleAmpersand)", [&testClass]() { testClass->SingleToken_OperatorsAndPunctuation("&&", CppLexer::DoubleAmpersand); });
	state += Soup::Test::RunTest(className, "SingleToken_OperatorsAndPunctuation(\"||\", CppLexer::DoubleVerticalBar)", [&testClass]() { testClass->SingleToken_OperatorsAndPunctuation("||", CppLexer::DoubleVerticalBar); });
	state += Soup::Test::RunTest(className, "SingleToken_OperatorsAndPunctuation(\"++\", CppLexer::DoublePlus)", [&testClass]() { testClass->SingleToken_OperatorsAndPunctuation("++", CppLexer::DoublePlus); });
	state += Soup::Test::RunTest(className, "SingleToken_OperatorsAndPunctuation(\"--\", CppLexer::DoubleMinus)", [&testClass]() { testClass->SingleToken_OperatorsAndPunctuation("--", CppLexer::DoubleMinus); });
	state += Soup::Test::RunTest(className, "SingleToken_OperatorsAndPunctuation(\",\", CppLexer::Comma)", [&testClass]() { testClass->SingleToken_OperatorsAndPunctuation(",", CppLexer::Comma); });
	state += Soup::Test::RunTest(className, "SingleToken_OperatorsAndPunctuation(\"->*\", CppLexer::ArrowAsterisk)", [&testClass]() { testClass->SingleToken_OperatorsAndPunctuation("->*", CppLexer::ArrowAsterisk); });
	state += Soup::Test::RunTest(className, "SingleToken_OperatorsAndPunctuation(\"->\", CppLexer::Arrow)", [&testClass]() { testClass->SingleToken_OperatorsAndPunctuation("->", CppLexer::Arrow); });
	state += Soup::Test::RunTest(className, "SingleToken_Zero(\"0\")", [&testClass]() { testClass->SingleToken_Zero("0"); });
	state += Soup::Test::RunTest(className, "SingleToken_IntegerLiteral(\"1\")", [&testClass]() { testClass->SingleToken_IntegerLiteral("1"); });
	state += Soup::Test::RunTest(className, "SingleToken_IntegerLiteral(\"42\")", [&testClass]() { testClass->SingleToken_IntegerLiteral("42"); });
	state += Soup::Test::RunTest(className, "SingleToken_IntegerLiteral(\"052\")", [&testClass]() { testClass->SingleToken_IntegerLiteral("052"); });
	state += Soup::Test::RunTest(className, "SingleToken_IntegerLiteral(\"0x2a\")", [&testClass]() { testClass->SingleToken_IntegerLiteral("0x2a"); });
	state += Soup::Test::RunTest(className, "SingleToken_IntegerLiteral(\"0X2A\")", [&testClass]() { testClass->SingleToken_IntegerLiteral("0X2A"); });
	state += Soup::Test::RunTest(className, "SingleToken_IntegerLiteral(\"0b101010\")", [&testClass]() { testClass->SingleToken_IntegerLiteral("0b101010"); });
	state += Soup::Test::RunTest(className, "SingleToken_IntegerLiteral(\"18446744073709550592ull\")", [&testClass]() { testClass->SingleToken_IntegerLiteral("18446744073709550592ull"); });
	state += Soup::Test::RunTest(className, "SingleToken_IntegerLiteral(\"18'446'744'073'709'550'592llu\")", [&testClass]() { testClass->SingleToken_IntegerLiteral("18'446'744'073'709'550'592llu"); });
	state += Soup::Test::RunTest(className, "SingleToken_IntegerLiteral(\"1844'6744'0737'0955'0592uL\")", [&testClass]() { testClass->SingleToken_IntegerLiteral("1844'6744'0737'0955'0592uL"); });
	state += Soup::Test::RunTest(className, "SingleToken_IntegerLiteral(\"184467'440737'0'95505'92LLU\")", [&testClass]() { testClass->SingleToken_IntegerLiteral("184467'440737'0'95505'92LLU"); });
	state += Soup::Test::RunTest(className, "SingleToken_IntegerLiteral(\"0xDeAdBeEfU\")", [&testClass]() { testClass->SingleToken_IntegerLiteral("0xDeAdBeEfU"); });
	state += Soup::Test::RunTest(className, "SingleToken_IntegerLiteral(\"0XdeadBEEFu\")", [&testClass]() { testClass->SingleToken_IntegerLiteral("0XdeadBEEFu"); });
	state += Soup::Test::RunTest(className, "SingleToken_FloatingPointLiteral(\"0.0f\")", [&testClass]() { testClass->SingleToken_FloatingPointLiteral("0.0f"); });
	state += Soup::Test::RunTest(className, "SingleToken_FloatingPointLiteral(\"1.0\")", [&testClass]() { testClass->SingleToken_FloatingPointLiteral("1.0"); });
	state += Soup::Test::RunTest(className, "SingleToken_FloatingPointLiteral(\"1'00.1f\")", [&testClass]() { testClass->SingleToken_FloatingPointLiteral("1'00.1f"); });
	state += Soup::Test::RunTest(className, "SingleToken_FloatingPointLiteral(\"0x1.2p3\")", [&testClass]() { testClass->SingleToken_FloatingPointLiteral("0x1.2p3"); });
	state += Soup::Test::RunTest(className, "SingleToken_FloatingPointLiteral(\"58.\")", [&testClass]() { testClass->SingleToken_FloatingPointLiteral("58."); });
	state += Soup::Test::RunTest(className, "SingleToken_FloatingPointLiteral(\"4e2\")", [&testClass]() { testClass->SingleToken_FloatingPointLiteral("4e2"); });
	state += Soup::Test::RunTest(className, "SingleToken_FloatingPointLiteral(\"123.456e-67\")", [&testClass]() { testClass->SingleToken_FloatingPointLiteral("123.456e-67"); });
	state += Soup::Test::RunTest(className, "SingleToken_FloatingPointLiteral(\".1E4f\")", [&testClass]() { testClass->SingleToken_FloatingPointLiteral(".1E4f"); });
	state += Soup::Test::RunTest(className, "SingleToken_FloatingPointLiteral(\"0x10.1p0\")", [&testClass]() { testClass->SingleToken_FloatingPointLiteral("0x10.1p0"); });
	state += Soup::Test::RunTest(className, "SingleToken_CharacterLiteral(\"'1'\")", [&testClass]() { testClass->SingleToken_CharacterLiteral("'1'"); });
	state += Soup::Test::RunTest(className, "SingleToken_CharacterLiteral(\"'\\0'\")", [&testClass]() { testClass->SingleToken_CharacterLiteral("'\\0'"); });
	state += Soup::Test::RunTest(className, "SingleToken_CharacterLiteral(\"L'A'\")", [&testClass]() { testClass->SingleToken_CharacterLiteral("L'A'"); });
	state += Soup::Test::RunTest(className, "SingleToken_CharacterLiteral(\"u'A'\")", [&testClass]() { testClass->SingleToken_CharacterLiteral("u'A'"); });
	state += Soup::Test::RunTest(className, "SingleToken_CharacterLiteral(\"u8'A'\")", [&testClass]() { testClass->SingleToken_CharacterLiteral("u8'A'"); });
	state += Soup::Test::RunTest(className, "SingleToken_CharacterLiteral(\"U'A'\")", [&testClass]() { testClass->SingleToken_CharacterLiteral("U'A'"); });
	state += Soup::Test::RunTest(className, "SingleToken_StringLiteral(\"\"\"\")", [&testClass]() { testClass->SingleToken_StringLiteral("\"\""); });
	state += Soup::Test::RunTest(className, "SingleToken_StringLiteral(\"\" \"\")", [&testClass]() { testClass->SingleToken_StringLiteral("\" \""); });
	state += Soup::Test::RunTest(className, "SingleToken_StringLiteral(\"\"Some cool text!\tYay.\"\")", [&testClass]() { testClass->SingleToken_StringLiteral("\"Some cool text!\tYay.\""); });
	state += Soup::Test::RunTest(className, "SingleToken_StringLiteral(\"U\" \"\")", [&testClass]() { testClass->SingleToken_StringLiteral("U\" \""); });
	state += Soup::Test::RunTest(className, "SingleToken_StringLiteral(\"u\" \"\")", [&testClass]() { testClass->SingleToken_StringLiteral("u\" \""); });
	state += Soup::Test::RunTest(className, "SingleToken_StringLiteral(\"u8\" \"\")", [&testClass]() { testClass->SingleToken_StringLiteral("u8\" \""); });
	state += Soup::Test::RunTest(className, "SingleToken_StringLiteral(\"L\" \"\")", [&testClass]() { testClass->SingleToken_StringLiteral("L\" \""); });
	state += Soup::Test::RunTest(className, "SingleToken_UserDefinedIntegerLiteral(\"12_km\")", [&testClass]() { testClass->SingleToken_UserDefinedIntegerLiteral("12_km"); });
	state += Soup::Test::RunTest(className, "SingleToken_UserDefinedIntegerLiteral(\"123_mytype\")", [&testClass]() { testClass->SingleToken_UserDefinedIntegerLiteral("123_mytype"); });
	state += Soup::Test::RunTest(className, "SingleToken_UserDefinedIntegerLiteral(\"0x123ABC_print\")", [&testClass]() { testClass->SingleToken_UserDefinedIntegerLiteral("0x123ABC_print"); });
	state += Soup::Test::RunTest(className, "SingleToken_UserDefinedIntegerLiteral(\"10if\")", [&testClass]() { testClass->SingleToken_UserDefinedIntegerLiteral("10if"); });
	state += Soup::Test::RunTest(className, "SingleToken_UserDefinedIntegerLiteral(\"2h\")", [&testClass]() { testClass->SingleToken_UserDefinedIntegerLiteral("2h"); });
	state += Soup::Test::RunTest(className, "SingleToken_UserDefinedIntegerLiteral(\"33m\")", [&testClass]() { testClass->SingleToken_UserDefinedIntegerLiteral("33m"); });
	state += Soup::Test::RunTest(className, "SingleToken_UserDefinedIntegerLiteral(\"15s\")", [&testClass]() { testClass->SingleToken_UserDefinedIntegerLiteral("15s"); });
	state += Soup::Test::RunTest(className, "SingleToken_UserDefinedIntegerLiteral(\"20000ms\")", [&testClass]() { testClass->SingleToken_UserDefinedIntegerLiteral("20000ms"); });
	state += Soup::Test::RunTest(className, "SingleToken_UserDefinedIntegerLiteral(\"100'000us\")", [&testClass]() { testClass->SingleToken_UserDefinedIntegerLiteral("100'000us"); });
	state += Soup::Test::RunTest(className, "SingleToken_UserDefinedIntegerLiteral(\"1ns\")", [&testClass]() { testClass->SingleToken_UserDefinedIntegerLiteral("1ns"); });
	state += Soup::Test::RunTest(className, "SingleToken_UserDefinedIntegerLiteral(\"1y\")", [&testClass]() { testClass->SingleToken_UserDefinedIntegerLiteral("1y"); });
	state += Soup::Test::RunTest(className, "SingleToken_UserDefinedIntegerLiteral(\"1d\")", [&testClass]() { testClass->SingleToken_UserDefinedIntegerLiteral("1d"); });
	state += Soup::Test::RunTest(className, "SingleToken_UserDefinedFloatingPointLiteral(\"2.2_km\")", [&testClass]() { testClass->SingleToken_UserDefinedFloatingPointLiteral("2.2_km"); });
	state += Soup::Test::RunTest(className, "SingleToken_UserDefinedFloatingPointLiteral(\"0.5_Pa\")", [&testClass]() { testClass->SingleToken_UserDefinedFloatingPointLiteral("0.5_Pa"); });
	state += Soup::Test::RunTest(className, "SingleToken_UserDefinedFloatingPointLiteral(\"90.0_deg\")", [&testClass]() { testClass->SingleToken_UserDefinedFloatingPointLiteral("90.0_deg"); });
	state += Soup::Test::RunTest(className, "SingleToken_UserDefinedCharacterLiteral(\"'c'_X\")", [&testClass]() { testClass->SingleToken_UserDefinedCharacterLiteral("'c'_X"); });
	state += Soup::Test::RunTest(className, "SingleToken_UserDefinedStringLiteral(\"\"abc\"_\")", [&testClass]() { testClass->SingleToken_UserDefinedStringLiteral("\"abc\"_"); });
	state += Soup::Test::RunTest(className, "SingleToken_UserDefinedStringLiteral(\"\"xyz\"_M\")", [&testClass]() { testClass->SingleToken_UserDefinedStringLiteral("\"xyz\"_M"); });
	state += Soup::Test::RunTest(className, "SingleToken_BlockComment(\"/**/\")", [&testClass]() { testClass->SingleToken_BlockComment("/**/"); });
	state += Soup::Test::RunTest(className, "SingleToken_BlockComment(\"/* */\")", [&testClass]() { testClass->SingleToken_BlockComment("/* */"); });
	state += Soup::Test::RunTest(className, "SingleToken_BlockComment(\"/* Hey a comment\n On many lines\n */\")", [&testClass]() { testClass->SingleToken_BlockComment("/* Hey a comment\n On many lines\n */"); });
	state += Soup::Test::RunTest(className, "SingleToken_LineComment(\"//\")", [&testClass]() { testClass->SingleToken_LineComment("//"); });
	state += Soup::Test::RunTest(className, "SingleToken_LineComment(\"// \")", [&testClass]() { testClass->SingleToken_LineComment("// "); });
	state += Soup::Test::RunTest(className, "SingleToken_LineComment(\"// A longer comment text\")", [&testClass]() { testClass->SingleToken_LineComment("// A longer comment text"); });
	state += Soup::Test::RunTest(className, "SingleToken_Identifier(\"a\")", [&testClass]() { testClass->SingleToken_Identifier("a"); });
	state += Soup::Test::RunTest(className, "SingleToken_Identifier(\"x\")", [&testClass]() { testClass->SingleToken_Identifier("x"); });
	state += Soup::Test::RunTest(className, "SingleToken_Identifier(\"myVariable\")", [&testClass]() { testClass->SingleToken_Identifier("myVariable"); });
	state += Soup::Test::RunTest(className, "SingleToken_Identifier(\"ClassName\")", [&testClass]() { testClass->SingleToken_Identifier("ClassName"); });
	state += Soup::Test::RunTest(className, "SingleToken_Identifier(\"NameSpace\")", [&testClass]() { testClass->SingleToken_Identifier("NameSpace"); });

	return state;
}